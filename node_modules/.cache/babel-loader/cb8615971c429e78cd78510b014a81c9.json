{"ast":null,"code":"var _jsxFileName = \"/Users/ofirgu/Desktop/CODE/draggable-layouts/src/modules/configurations/components/Outlet/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setTitle } from '../../../../redux/appSlice';\nimport { addLayout, selectEditableLayout, resetEditableLayout } from '../../../../redux/layoutsSlice';\nimport SaveDialog from '../SaveDialog';\nimport Sidebar from '../Sidebar';\nimport Main from '../Main';\nimport Styled from './styled';\nexport default (() => {\n  const dispatch = useDispatch();\n  const editableLayout = useSelector(selectEditableLayout);\n  const [currentLayout, setCurrentLayout] = useState(editableLayout || []);\n  const [elementTypes, setElementTypes] = useState(editableLayout ? editableLayout.map(e => e.type) : []);\n  const [dragableElementType, setDragableElementType] = useState(null);\n  const [openDialog, setOpenDialog] = useState(false); //console.log('elementTypes: ', elementTypes)\n  //console.log('currentLayout: ', currentLayout)\n\n  useEffect(() => {\n    dispatch(setTitle('Configurations'));\n  });\n\n  const onLayoutChange = layout => {\n    if (currentLayout.length === layout.length) setCurrentLayout(layout);\n  };\n\n  const onDrop = layout => {\n    setElementTypes([...elementTypes, dragableElementType]);\n    setCurrentLayout(layout);\n  };\n\n  const saveLayout = () => {\n    if (currentLayout.length > 0) {\n      dispatch(addLayout(currentLayout.map((item, index) => ({ ...item,\n        type: elementTypes[index]\n      }))));\n      setCurrentLayout([]);\n    }\n  };\n\n  const resetLayout = () => {\n    setCurrentLayout([]);\n    setElementTypes([]);\n    setDragableElementType(null);\n    dispatch(resetEditableLayout());\n  };\n\n  return /*#__PURE__*/React.createElement(Styled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Sidebar, {\n    setDragableElementType: setDragableElementType,\n    saveLayout: () => setOpenDialog(true),\n    resetLayout: resetLayout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Main, {\n    layout: currentLayout,\n    elementTypes: elementTypes,\n    onLayoutChange: onLayoutChange,\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SaveDialog, {\n    open: openDialog,\n    setOpen: setOpenDialog,\n    saveLayout: saveLayout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n});","map":{"version":3,"sources":["/Users/ofirgu/Desktop/CODE/draggable-layouts/src/modules/configurations/components/Outlet/index.js"],"names":["React","useState","useEffect","useDispatch","useSelector","setTitle","addLayout","selectEditableLayout","resetEditableLayout","SaveDialog","Sidebar","Main","Styled","dispatch","editableLayout","currentLayout","setCurrentLayout","elementTypes","setElementTypes","map","e","type","dragableElementType","setDragableElementType","openDialog","setOpenDialog","onLayoutChange","layout","length","onDrop","saveLayout","item","index","resetLayout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setTitle } from '../../../../redux/appSlice';\nimport { addLayout, selectEditableLayout, resetEditableLayout } from '../../../../redux/layoutsSlice';\n\nimport SaveDialog from '../SaveDialog';\nimport Sidebar from '../Sidebar';\nimport Main from '../Main';\nimport Styled from './styled';\n\nexport default () => {\n    const dispatch = useDispatch();\n    const editableLayout = useSelector(selectEditableLayout);\n    const [currentLayout, setCurrentLayout] = useState(editableLayout || []);\n    const [elementTypes, setElementTypes] = useState(editableLayout ? editableLayout.map(e => e.type) : []);\n    const [dragableElementType, setDragableElementType] = useState(null);\n    const [openDialog, setOpenDialog] = useState(false);\n\n    //console.log('elementTypes: ', elementTypes)\n    //console.log('currentLayout: ', currentLayout)\n    \n    useEffect(() => {\n        dispatch(setTitle('Configurations'));\n    });\n\n    const onLayoutChange = layout => {\n        if(currentLayout.length === layout.length)\n            setCurrentLayout(layout);\n    }\n\n    const onDrop = layout => {\n        setElementTypes([...elementTypes, dragableElementType]);\n        setCurrentLayout(layout)\n    };\n\n    const saveLayout = () => {\n        if(currentLayout.length > 0) {\n            dispatch(addLayout(currentLayout.map((item, index) => ({\n                ...item,\n                type: elementTypes[index]\n            }))));\n            setCurrentLayout([]);\n        }\n    };\n\n    const resetLayout = () => {\n        setCurrentLayout([]);\n        setElementTypes([]);\n        setDragableElementType(null);\n        dispatch(resetEditableLayout());\n    };\n\n    return (\n        <Styled>\n            <Sidebar \n                setDragableElementType={setDragableElementType} \n                saveLayout={() => setOpenDialog(true)}\n                resetLayout={resetLayout}\n            />\n\n            <Main \n                layout={currentLayout} \n                elementTypes={elementTypes}\n                onLayoutChange={onLayoutChange}\n                onDrop={onDrop}\n            />\n            \n            <SaveDialog \n                open={openDialog} \n                setOpen={setOpenDialog} \n                saveLayout={saveLayout} \n            />\n        </Styled>\n    );\n};"]},"metadata":{},"sourceType":"module"}