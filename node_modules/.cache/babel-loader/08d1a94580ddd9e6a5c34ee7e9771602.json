{"ast":null,"code":"var _jsxFileName = \"/Users/ofirgu/Desktop/CODE/draggable-layouts/src/components/BasicLayout/index.js\";\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport ColoredRectangle from '../Rectangle';\nimport './style.css';\nconst ReactGridLayout = WidthProvider(RGL);\n\nconst BasicLayout = ({\n  layout,\n  elementTypes,\n  isDroppable,\n  viewOnly,\n  onLayoutChange,\n  onDrop\n}) => {\n  const generateDOM = () => {\n    return layout.map((d, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ColoredRectangle, {\n      className: elementTypes ? elementTypes[i] : d.type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  const getLayout = () => {\n    return viewOnly ? layout.map(l => ({ ...l,\n      static: true\n    })) : layout;\n  };\n\n  return /*#__PURE__*/React.createElement(ReactGridLayout, {\n    className: \"layout\",\n    layout: getLayout(),\n    isDroppable: isDroppable,\n    rowHeight: viewOnly ? 30 : 100,\n    cols: 6,\n    rows: 6,\n    onLayoutChange: onLayoutChange,\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, generateDOM());\n};\n\nBasicLayout.propTypes = {\n  layout: PropTypes.arrayOf(PropTypes.object),\n  elementTypes: PropTypes.arrayOf(PropTypes.string),\n  isDroppable: PropTypes.bool,\n  viewOnly: PropTypes.bool,\n  onLayoutChange: PropTypes.func,\n  onDrop: PropTypes.func\n};\nexport default BasicLayout;","map":{"version":3,"sources":["/Users/ofirgu/Desktop/CODE/draggable-layouts/src/components/BasicLayout/index.js"],"names":["React","PropTypes","RGL","WidthProvider","ColoredRectangle","ReactGridLayout","BasicLayout","layout","elementTypes","isDroppable","viewOnly","onLayoutChange","onDrop","generateDOM","map","d","i","type","getLayout","l","static","propTypes","arrayOf","object","string","bool","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,GAAP,IAAcC,aAAd,QAAmC,mBAAnC;AAEA,OAAOC,gBAAP,MAA6B,cAA7B;AAEA,OAAO,aAAP;AAEA,MAAMC,eAAe,GAAGF,aAAa,CAACD,GAAD,CAArC;;AAEA,MAAMI,WAAW,GAAG,CAAC;AACnBC,EAAAA,MADmB;AACXC,EAAAA,YADW;AACGC,EAAAA,WADH;AAEnBC,EAAAA,QAFmB;AAETC,EAAAA,cAFS;AAEOC,EAAAA;AAFP,CAAD,KAEqB;AAEvC,QAAMC,WAAW,GAAG,MAAM;AACxB,WAAON,MAAM,CAACO,GAAP,CAAW,CAACC,CAAD,EAAIC,CAAJ,kBACd;AAAK,MAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AACE,MAAA,SAAS,EAAER,YAAY,GAAGA,YAAY,CAACQ,CAAD,CAAf,GAAqBD,CAAC,CAACE,IADhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADG,CAAP;AAOD,GARD;;AAUA,QAAMC,SAAS,GAAG,MAAM;AACtB,WAAOR,QAAQ,GACbH,MAAM,CAACO,GAAP,CAAWK,CAAC,KAAK,EACf,GAAGA,CADY;AAEfC,MAAAA,MAAM,EAAE;AAFO,KAAL,CAAZ,CADa,GAKbb,MALF;AAMD,GAPD;;AASA,sBACE,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,QADd;AAEI,IAAA,MAAM,EAAEW,SAAS,EAFrB;AAGI,IAAA,WAAW,EAAET,WAHjB;AAII,IAAA,SAAS,EAAEC,QAAQ,GAAG,EAAH,GAAQ,GAJ/B;AAKI,IAAA,IAAI,EAAE,CALV;AAMI,IAAA,IAAI,EAAE,CANV;AAOI,IAAA,cAAc,EAAEC,cAPpB;AAQI,IAAA,MAAM,EAAEC,MARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUKC,WAAW,EAVhB,CADF;AAcD,CArCD;;AAuCAP,WAAW,CAACe,SAAZ,GAAwB;AACtBd,EAAAA,MAAM,EAAEN,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACsB,MAA5B,CADc;AAEtBf,EAAAA,YAAY,EAAEP,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACuB,MAA5B,CAFQ;AAGtBf,EAAAA,WAAW,EAAER,SAAS,CAACwB,IAHD;AAItBf,EAAAA,QAAQ,EAAET,SAAS,CAACwB,IAJE;AAKtBd,EAAAA,cAAc,EAAEV,SAAS,CAACyB,IALJ;AAMtBd,EAAAA,MAAM,EAAEX,SAAS,CAACyB;AANI,CAAxB;AASA,eAAepB,WAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types';\n\nimport RGL, { WidthProvider } from \"react-grid-layout\";\n\nimport ColoredRectangle from '../Rectangle';\n\nimport './style.css';\n\nconst ReactGridLayout = WidthProvider(RGL);\n\nconst BasicLayout = ({ \n  layout, elementTypes, isDroppable, \n  viewOnly, onLayoutChange, onDrop }) => {\n    \n  const generateDOM = () => {\n    return layout.map((d, i) => (\n        <div key={i}>\n          <ColoredRectangle \n            className={elementTypes ? elementTypes[i] : d.type} \n          />\n        </div>\n    ));\n  };\n\n  const getLayout = () => {\n    return viewOnly \n    ? layout.map(l => ({\n        ...l, \n        static: true \n      }))\n    : layout\n  };\n\n  return (\n    <ReactGridLayout\n        className=\"layout\"\n        layout={getLayout()}\n        isDroppable={isDroppable}\n        rowHeight={viewOnly ? 30 : 100}\n        cols={6}\n        rows={6}\n        onLayoutChange={onLayoutChange}\n        onDrop={onDrop}\n      >\n        {generateDOM()}\n    </ReactGridLayout>\n  );\n}\n\nBasicLayout.propTypes = {\n  layout: PropTypes.arrayOf(PropTypes.object),\n  elementTypes: PropTypes.arrayOf(PropTypes.string),\n  isDroppable: PropTypes.bool,\n  viewOnly: PropTypes.bool,\n  onLayoutChange: PropTypes.func,\n  onDrop: PropTypes.func\n};\n\nexport default BasicLayout;\n"]},"metadata":{},"sourceType":"module"}